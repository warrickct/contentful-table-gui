{"version":3,"sources":["components/Table/Table.component.tsx","App.js","reportWebVitals.js","index.js"],"names":["TableContainer","styled","th","div","StyledTableRow","td","TableRow","props","headers","HorizontalDiv","TableExtension","useState","tableData","setTableData","row","col","setCol","useHeader","toggleHeader","init","sdk","window","startAutoResizer","loadedData","field","getValue","length","updateTableStateAndField","setValue","renderRow","rowIdx","map","item","cellIdx","name","id","labelText","aria-label","onChange","e","event","newTableData","target","value","updateCellData","textarea","className","isActive","onToggle","buttonType","size","onClick","table","additionalRow","Array","fill","push","pop","AppContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAiCMA,GAdcC,IAAOC,GAAV,yDAcMD,IAAOE,IAAV,4FAgBdC,GALkBH,IAAOI,GAAV,gDAKEJ,YAAOK,WAAPL,CAAH,uDACI,SAACM,GAAD,MAAkC,SAAlBA,EAAMC,QAAqB,UAAY,YAIzEC,EAAgBR,IAAOE,IAAV,yJA0KJO,EA9JQ,SAACH,GAEpB,IAFmC,EAkBDI,mBAAgB,IAlBf,mBAkB5BC,EAlB4B,KAkBjBC,EAlBiB,OAmBbF,mBAAmB,IAnBN,mBAmB5BG,EAnB4B,aAoBbH,mBAAiB,IApBJ,mBAoB5BI,EApB4B,KAoBvBC,EApBuB,OAqBDL,oBAAS,GArBR,mBAqB5BM,EArB4B,KAqBjBC,EArBiB,KAG/BC,gBAAK,SAACC,GACFA,EAAIC,OAAOC,mBAEX,IAAIC,EAAaH,EAAII,MAAMC,WAEvBX,EAAIY,OAAS,IACbb,EAAaU,EAAWX,WACpBW,EAAWN,YAAcA,GACzBC,GAAcD,OAc9B,IAOMU,EAA2B,SAACf,GAE9BC,EAAaD,GAGbO,gBAAK,SAACC,GACFA,EAAII,MAAMI,SAAS,CACfX,YACAL,kBAqENiB,EAAY,SAACf,EAAegB,GAC9B,OAAOhB,EAAIiB,KAAI,SAACC,EAAMC,GAClB,OAAO,cAAC,YAAD,UACH,cAAC,YAAD,CACIC,KAAI,sBAAiBJ,EAAjB,aAA4BG,GAChCE,GAAE,sBAAiBL,EAAjB,aAA4BG,GAC9BG,UAAS,GAITC,aAAA,wBAA6BP,EAA7B,kBAA6CG,GAC7CK,SAAU,SAAAC,GAAC,OAvBJ,SAACC,EAAYV,EAAgBG,GAChD,IAAIQ,EAAY,YAAO7B,GACvB6B,EAAaX,GAAQG,GAAWO,EAAME,OAAOC,MAC7ChB,EAAyBc,GAoBEG,CAAeL,EAAGT,EAAQG,IACzCY,UAAQ,UAMxB,OAEI,cADA,CACA,sBACI,cAAC7C,EAAD,UACI,eAAC,QAAD,CAAO8C,UAAU,gBAAjB,UACI,cAAC,YAAD,IAEA,cAAC,YAAD,UA/CLlC,EAAUmB,KAAI,SAACjB,EAAKgB,GACvB,OAAO,cAAC1B,EAAD,CAAgBI,QAAO,UAAKS,GAAuB,GAAVa,GAAzC,SACFD,EAAUf,EAAKgB,IADgD,MAAQA,aAmD5E,eAAC,aAAD,oBACWlB,EAAUc,OADrB,aACuCX,KAEvC,cAACN,EAAD,UACI,cAAC,eAAD,CAAcsC,SAAU9B,EAAW+B,SAtHpB,WACvB9B,GAAcD,GACdU,EAAyBf,IAoHjB,uBAGJ,eAACH,EAAD,WACI,cAAC,SAAD,CAAQwC,WAAW,UAAUC,KAAK,QAAQC,QAjGvC,WACX,KAAIpC,GAAO,GAAX,CAGA,IAAIqC,EAAY,YAAOxC,GACnByC,EAAgB,IAAIC,MAAMvC,GAAKwC,KAAK,MACxCH,EAAMI,KAAKH,GACX1B,EAAyByB,KA0FjB,qBACA,cAAC,SAAD,CAAQH,WAAW,UAAUC,KAAK,QAAQC,QAvEpC,WACd,KAAIvC,EAAUc,QAAU,GAAxB,CAGA,IAAIe,EAAY,YAAO7B,GACvB6B,EAAagB,MACb9B,EAAyBc,KAiEjB,2BAEJ,eAAChC,EAAD,WACI,cAAC,SAAD,CAAQwC,WAAW,UAAUC,KAAK,QAAQC,QA3FvC,WACXnC,EAAOD,EAAM,IA0FL,wBACA,cAAC,SAAD,CAAQkC,WAAW,UAAUC,KAAK,QAAQC,QArFpC,WACVpC,GAAO,GAGXC,EAAOD,EAAM,IAiFL,kCCtNV2C,EAAezD,IAAOE,IAAV,yEAgBHwD,MAVf,WACI,OACE,cAACD,EAAD,CAAcZ,UAAU,MAAxB,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCFKc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.899d5ebc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n    Button,\n    TextField,\n    TableBody,\n    TableCell,\n    TableRow,\n    Table,\n    TableHead,\n    Heading,\n    ToggleButton,\n    Switch,\n    DisplayText,\n    Subheading\n} from '@contentful/forma-36-react-components';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport styled from \"styled-components\";\nimport { init } from \"@contentful/app-sdk\";\n\nconst TableHeader = styled.th`\n    background-color: pink;\n`;\n\n// interface TableCellProps {\n//     useHeader: boolean;\n// }\n\n\n// max-width: ${window.innerWidth};\n// overflow-x: auto;\n// background-color: green;\n// padding: 1rem;\n\nconst TableContainer = styled.div`\n    width: 100%;\n    overflow-x: auto;\n    padding: 1rem;\n\n`;\n// .table---fixed {\n//     table-layout: auto;\n//     width: 100%;\n// }\n\nconst CustomTableCell = styled.td`\n    padding: 0rem;\n`;\n// TODO: Add dynamic header color based on state -- background-color: ${(props: TableCellProps) => props.useHeader ? \"#ffffff\" : \"#e2e2e2\"};\n\nconst StyledTableRow = styled(TableRow)`\n    background-color: ${(props: any) => props.headers === 'true' ? \"#e1e7eb\" : 'white'}\n`;\n\n\nconst HorizontalDiv = styled.div`\n    display: flex;\n    // margin: 1rem;\n    flex-direction: horizontal;\n    \n    > * {\n        margin: 0.25rem;\n    }\n`;\n\n// TODO: Import in form 36 fcss for more consistent styling\n\nconst TableExtension = (props: any) => {\n\n    const initializeExtension = () => {\n        init((sdk: any) => {\n            sdk.window.startAutoResizer();\n\n            let loadedData = sdk.field.getValue();\n\n            if (row.length > 0) {\n                setTableData(loadedData.tableData);\n                if (loadedData.useHeader !== useHeader) {\n                    toggleHeader(!useHeader);\n                }\n            }\n        });\n    }\n\n    // a set of rows.\n    const [tableData, setTableData] = useState<any[]>([]);\n    const [row, setRow] = useState<string[]>([]);\n    const [col, setCol] = useState<number>(0);\n    const [useHeader, toggleHeader] = useState(true);\n\n    initializeExtension();\n\n    const handleToggleHeader = () => {\n        toggleHeader(!useHeader);\n        updateTableStateAndField(tableData);\n    }\n\n\n    /** wrapper to ensure table changes synchronize with contentful field value changes. */\n    const updateTableStateAndField = (tableData: any[]) => {\n        // updating react component state\n        setTableData(tableData);\n\n        // // update the field value\n        init((sdk: any) => {\n            sdk.field.setValue({\n                useHeader,\n                tableData\n            });\n        })\n    }\n\n\n\n    /**\n     * Adds a row to the table with a size determined by the current column count.\n     */\n    const addRow = () => {\n        if (col <= 0) {\n            return;\n        }\n        let table: any[] = [...tableData];\n        let additionalRow = new Array(col).fill(null);\n        table.push(additionalRow);\n        updateTableStateAndField(table);\n    }\n\n    const addCol = () => {\n        setCol(col + 1);\n    }\n\n    /**\n     * reduces the column size for the next row to be created\n     */\n    const removeCol = () => {\n        if (col <= 0) {\n            return;\n        }\n        setCol(col - 1);\n    }\n\n    /**\n     * removes the end/bottom row of the table\n     */\n    const removeRow = () => {\n        if (tableData.length <= 0) {\n            return;\n        }\n        let newTableData = [...tableData];\n        newTableData.pop();\n        updateTableStateAndField(newTableData);\n    }\n\n    const renderTableRows = () => {\n        return tableData.map((row, rowIdx) => {\n            return <StyledTableRow headers={`${useHeader && rowIdx == 0}`} key={\"row\" + rowIdx}>\n                {renderRow(row, rowIdx)}\n            </StyledTableRow>\n        });\n    }\n\n    /**\n     * Updates the table data with values from a table cell.\n     */\n    const updateCellData = (event: any, rowIdx: number, cellIdx: number) => {\n        let newTableData = [...tableData]; // copy the object\n        newTableData[rowIdx][cellIdx] = event.target.value // update the singular cell entry\n        updateTableStateAndField(newTableData); // update the tableData state. (not sure if it's necessary?)\n    }\n\n\n    /**\n     * Creates a row within the table\n     * @param row A row which is an array of string values\n     * @param rowIdx The index of the row currently being created\n     */\n    const renderRow = (row: string[], rowIdx: number) => {\n        return row.map((item, cellIdx) => {\n            return <TableCell>\n                <TextField\n                    name={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    id={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    labelText={``}\n                    // helpText={`Input your text.`}\n                    // TODO: Implement better header visual indicator\n                    // helpText={rowIdx == 0  && useHeader ? 'Header' : ''}\n                    aria-label={`Input for row ${rowIdx}, cell ${cellIdx}`}\n                    onChange={e => updateCellData(e, rowIdx, cellIdx)}\n                    textarea\n                ></TextField>\n            </TableCell>\n        });\n    }\n\n    return (\n        // <TableContainer></TableContainer>\n        <>\n            <TableContainer>\n                <Table className=\"table---fixed\">\n                    <TableHead>\n                    </TableHead>\n                    <TableBody>\n                        {renderTableRows()}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <Subheading>\n                Rows: {tableData.length} Columns: {col}\n            </Subheading>\n            <HorizontalDiv>\n                <ToggleButton isActive={useHeader} onToggle={handleToggleHeader}\n                >Headers</ToggleButton>\n            </HorizontalDiv>\n            <HorizontalDiv>\n                <Button buttonType=\"primary\" size=\"small\" onClick={addRow}>Add Row</Button>\n                <Button buttonType=\"primary\" size=\"small\" onClick={removeRow}>Remove Row</Button>\n            </HorizontalDiv>\n            <HorizontalDiv>\n                <Button buttonType=\"primary\" size=\"small\" onClick={addCol}>Add Column</Button>\n                <Button buttonType=\"primary\" size=\"small\" onClick={removeCol}>Remove Column</Button>\n            </HorizontalDiv>\n        </>\n    )\n}\n\nexport default TableExtension;\n\n// build the html for the rows, create the data on save? Data should be a variable as it's to re-render the page.","import './App.css';\nimport TableExtension from \"./components/Table/Table.component\";\nimport styled from 'styled-components';\n\nconst AppContainer = styled.div`\n  overflow: hidden;\n  border-radius: 10px;\n`;\n\n\nfunction App() {\n    return (\n      <AppContainer className=\"App\">\n        <header className=\"App-header\">\n          <TableExtension></TableExtension>\n        </header>\n      </AppContainer>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}