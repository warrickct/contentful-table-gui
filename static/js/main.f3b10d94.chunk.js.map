{"version":3,"sources":["components/Table/Table.component.tsx","App.js","reportWebVitals.js","index.js"],"names":["headerColor","StyledButton","styled","Button","StyledToggleButton","ToggleButton","StyledFileInput","input","StyledLabel","label","StyledTableHead","TableHead","StyledTableCell","TableCell","props","useHeaderColor","StyledDeleteButton","StyledTableContainer","div","StyledTableRow","TableRow","HorizontalDiv","TableExtension","useState","tableData","setTableData","col","setColumnSize","useHorizontalHeaders","setHorizontalHeaders","useVerticalHeaders","setVerticalHeaders","useEffect","storeFieldValues","init","sdk","window","startAutoResizer","data","field","getValue","setValue","normalize2DArrayLength","arr","size","forEach","row","index","length","row2","concat","Array","fill","slice","renderTableRows","start","end","styledRows","rowIdx","push","renderTableCells","aria-label","icon","onClick","removeSelectedRow","map","item","cellIdx","removeSelectedColumn","name","id","labelText","value","onChange","e","event","newTableData","target","updateCellData","textarea","csvToTable","text","maxCols","lines","split","splice","line","cells","str","curCellText","inQuotes","i","char","indexOf","csvToCells","normalizedTableData","rowIndex","colIndex","htmlFor","files","reader","FileReader","onload","result","csvText","readAsText","loadCsv","type","accept","isActive","onToggle","isFullWidth","buttonType","table","additionalRow","pop","newColSize","newTable","newColumnSize","AppContainer","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3b10d94.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n    Button,\n    TextField,\n    TableBody,\n    TableCell,\n    TableRow,\n    Table,\n    TableHead,\n    ToggleButton,\n    Subheading,\n    HelpText,\n    IconButton\n} from '@contentful/forma-36-react-components';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport styled from \"styled-components\";\nimport { init } from \"@contentful/app-sdk\";\n\nlet primaryButtonColor = 'rgb(46, 117, 212)';\nlet headerColor = '#c3cfd5';\n\nconst StyledButton = styled(Button)`\n    width: 25%%\n`;\n\nconst StyledToggleButton = styled(ToggleButton)`\n    margin: 0.25rem;\n    width: 35% !important;\n`;\n\nconst StyledFileInput = styled.input`\n        display: none;\n`;\n\nconst StyledLabel = styled.label`\n    width: 25%;\n    color: white;\n    font-size: 0.875rem;\n    font-weight: 500;\n    font-size: 14px;\n    border: 1px solid #ccc;\n    border-radius: 0.25rem;\n    display: inline-block;\n    padding: 6px 12px;\n    cursor: pointer;\n    border-color: #2e75d4;\n    background-color: ${primaryButtonColor};\n`;\n\n\n// background-color: ${(props: any) => props.headers === 'true' ? \"#798cd4\" : 'white'}\nconst StyledTableHead = styled(TableHead)`\n        // th {\n        //     // background-color: ${headerColor};\n        // }\n`;\n\nconst StyledTableCell = styled(TableCell) <{ useHeaderColor: boolean }>`\n        padding 1rem;\n        display: flex;\n        align-items: center;\n        justify-content: center; \n        flex-direction: column;\n        ${props => props.useHeaderColor ? `background-color: ${headerColor} !important;` : null};\n`;\n\nconst StyledDeleteButton = styled(Button)`\n    align-self: center;\n`;\n\nconst StyledTableContainer = styled.div`\n    width: 100%;\n    overflow-x: auto;\n    padding: 1rem;\n    display: flex;\n    flex-direction: row;\n`;\n\nconst StyledTableRow = styled(TableRow)`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n\n    :hover  {\n        background-color: unset !important;\n    }\n`;\n\nconst HorizontalDiv = styled.div`\n    width: 70%;\n    display: flex;\n    justify-content: center;\n    flex-direction: horizontal;\n    \n    > * {\n        margin: 0.25rem;\n    }\n`;\n\nconst TableExtension = (props: any) => {\n\n    const [tableData, setTableData] = useState<any[]>([]);\n    const [col, setColumnSize] = useState<number>(3);\n    const [useHorizontalHeaders, setHorizontalHeaders] = useState(true);\n    const [useVerticalHeaders, setVerticalHeaders] = useState(true);\n\n    /**\n     * Starts the entension window auto resizing and unpacks saved table data and metadata.\n     */\n    const initializeExtension = () => {\n        init((sdk: any) => {\n            sdk.window.startAutoResizer();\n            let data = sdk.field.getValue();\n            if (!! data) {\n                if (!! data.tableData) {\n                    setTableData(data.tableData);\n                }\n                if (typeof(data.useVerticalHeaders) == 'boolean') {\n                    setVerticalHeaders(data.useVerticalHeaders);\n                }\n                if (typeof(data.useHorizontalHeaders) == 'boolean') {\n                    setHorizontalHeaders(data.useHorizontalHeaders);\n                }\n            }\n            \n        });\n    }\n\n    useEffect(() => {\n        storeFieldValues();\n        // console.log({tableData});\n        // console.log({useHorizontalHeaders});\n        // console.log({useVerticalHeaders});\n    }, [tableData, useHorizontalHeaders, useVerticalHeaders]);\n\n    useEffect(() => {\n        initializeExtension();\n    }, [])\n\n    /**\n     * Reserves the state of horizontal header state and updates contentful field value.\n     */\n    const handleToggleHorizontalHeaders = () => {\n        setHorizontalHeaders(!useHorizontalHeaders);\n    }\n\n\n    const handleToggleVerticalHeaders = () => {\n        setVerticalHeaders(!useVerticalHeaders);\n    }\n\n    /** uses header and table state data and stores them in content field */\n    const storeFieldValues = () => {\n        // // update the field value\n        init((sdk: any) => {\n            sdk.field.setValue({\n                useHorizontalHeaders,\n                useVerticalHeaders,\n                tableData\n            });\n        })\n    }\n\n    /**\n     * Adds a row to the table with a size determined by the current column count.\n     */\n    const addRow = () => {\n        if (col <= 0) {\n            return;\n        }\n        let table: any[] = [...tableData];\n        let additionalRow = new Array(col).fill(\"\");\n        table.push(additionalRow);\n        setTableData(table);\n    }\n\n    const addCol = () => {\n        let newColSize = col + 1;\n        setColumnSize(newColSize);\n        // go through all the pre-existing rows and increase their size.\n        let newTable = normalize2DArrayLength([...tableData], newColSize);\n        setTableData(newTable)\n    }\n\n    const normalize2DArrayLength = (arr: any, size: number) => {\n        arr.forEach((row: any, index: number) => {\n            if (row.length < size) {\n                // increase the row size.\n                let row2 = row.concat(new Array(size - row.length).fill(\"\"));\n                arr[index] = row2;\n            } else if (row.length > size) {\n                arr[index] = row.slice(0, size - 1);\n            }\n        });\n        return arr;\n    }\n\n    /**\n     * reduces the column size for the next row to be created\n     */\n    const removeEndCol = () => {\n        if (col <= 0) {\n            return;\n        }\n        let newColumnSize = col - 1;\n        setColumnSize(newColumnSize);\n        // go through all the pre-existing rows and increase their size.\n        let newTable = normalize2DArrayLength([...tableData], newColumnSize);\n        setTableData(newTable);\n    }\n\n    /**\n     * removes the end/bottom row of the table\n     */\n    const removeRow = () => {\n        if (tableData.length <= 0) {\n            return;\n        }\n        let newTableData = [...tableData];\n        newTableData.pop();\n        setTableData(newTableData);\n    }\n\n    /**\n     * Generates the table rows from table data\n     * @param start starting index of the rows you wish to render\n     * @param end index to end rendering rows\n     */\n    const renderTableRows = (start: number | null = null, end: number | null = null) => {\n        if (tableData.length <= 0) {\n            return;\n        }\n        let styledRows = [];\n        // remapping the values to work with for-loop\n        start = start ? start : 0;\n        end = end ? end : tableData.length;\n        for (let rowIdx = start; rowIdx < end; rowIdx++) {\n            let row = tableData[rowIdx];\n            styledRows.push(\n                <>\n                    <StyledTableRow key={\"row\" + rowIdx}>\n                        {renderTableCells(row, rowIdx)}\n                        {col > 0 ?\n                            <StyledTableCell useHeaderColor={false}>\n                                <Button aria-label={`Delete row ${rowIdx}`} icon=\"Delete\" onClick={() => removeSelectedRow(rowIdx)}></Button>\n                            </StyledTableCell> : null\n                        }\n                    </StyledTableRow>\n                </>\n            )\n        }\n        return styledRows;\n    }\n\n    /**\n     * Updates the table data with values from a table cell.\n     */\n    const updateCellData = (event: any, rowIdx: number, cellIdx: number) => {\n        let newTableData = [...tableData]; // copy the object\n        newTableData[rowIdx][cellIdx] = event.target.value // update the singular cell entry\n        setTableData(newTableData);\n    }\n\n    /**\n     * Creates the cells of a row within the table\n     * @param row A row which is an array of string values\n     * @param rowIdx The index of the row currently being created\n     */\n    const renderTableCells = (row: string[], rowIdx: number) => {\n        return row.map((item, cellIdx) => {\n            let useHeaderColor = (useVerticalHeaders && cellIdx === 0) || (rowIdx == 0 && useHorizontalHeaders);\n            return <StyledTableCell useHeaderColor={useHeaderColor}>\n                {rowIdx === 0 ?\n                    <StyledDeleteButton\n                        icon=\"Delete\"\n                        aria-label={`Delete column ${cellIdx}`}\n                        onClick={() => removeSelectedColumn(cellIdx)}>\n                    </StyledDeleteButton>\n                    : null\n                }\n                <TextField\n                    name={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    id={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    labelText={``}\n                    value={item}\n                    aria-label={`Text field input for row ${rowIdx}, cell ${cellIdx}`}\n                    onChange={e => updateCellData(e, rowIdx, cellIdx)}\n                    textarea\n                ></TextField>\n            </StyledTableCell>\n        });\n    }\n\n    /**\n     * Loads a csv file into the table component.\n     * @param e event\n     */\n    const loadCsv = (e: any) => {\n        let files = e.target.files;\n        let reader = new FileReader();\n        reader.onload = function (e) {\n            if (e && e.target && e.target.result) {\n                let csvText = e.target.result;\n                if (typeof (csvText) == 'string') {\n                    csvToTable(csvText);\n                }\n            }\n        };\n        reader.readAsText(files[0]);\n        // resetting value so re-uploading triggers onchange.\n        e.target.value = null;\n    }\n\n\n    const csvToCells = (str: string) => {\n\n        if (str === \"\" || str === \"\\n\") {\n            return [];\n        }\n\n        let curCellText: any = \"\";\n        let cells: string[] = [];\n        let inQuotes: boolean = false;\n\n        for (let i = 0; i < str.length; i++) {\n            let char = str[i];\n\n            if (char === ',') {\n                if (!inQuotes) {\n                    // separate cell at comma, reset cell text\n                    cells.push(curCellText);\n                    curCellText = '';\n                } else {\n                    // dont separate as a cell, add as a displayed comma.\n                    curCellText += char;\n                }\n            }\n            else if (char === '\"') {\n                // if theres a starting quote, activate inQuotes\n                if (inQuotes) {\n                    // close existing quote\n                    inQuotes = false;\n                }\n                else {\n                    if (str.indexOf('\"', i + 1) > -1) {\n                        // another quote to come - start quote block\n                        inQuotes = true;\n                    } else {\n                        // no more quotes, add as a solitary quote character.\n                        curCellText += char;\n                    }\n                }\n            } else {\n                // regular character, append to the cell text\n                curCellText += char;\n            }\n        }\n        cells.push(curCellText); // push final cell\n        return cells;\n    }\n\n    /**\n     * Converts a csv formatted text into a 2D table data array.\n     */\n    const csvToTable = (text: string) => {\n        let maxCols = 0;\n        let lines = text.split('\\n');\n\n        // removing trailing newline character\n        if (lines[lines.length - 1] == \"\") {\n            lines.splice(lines.length - 1);\n        }\n\n        // convert text into tablerow arrays\n        let newTableData = lines.map((line: string) => {\n            let cells = csvToCells(line);\n            // update column setting for the table\n            maxCols = maxCols < cells.length ? cells.length : maxCols;\n            return cells;\n        });\n        setColumnSize(maxCols);\n        let normalizedTableData = normalize2DArrayLength(newTableData, maxCols)\n        setTableData(normalizedTableData);\n    }\n\n    /**\n     * Determines what table type to create and renders it.\n     */\n    const renderTable = () => {\n        if (useHorizontalHeaders) {\n            return (\n                <>\n                    <StyledTableHead>\n                        {renderTableRows(0, 1)}\n                    </StyledTableHead>\n                    <TableBody>\n                        {renderTableRows(1)}\n                    </TableBody>\n                </>\n            )\n        } else {\n            return (\n                <TableBody>\n                    {renderTableRows()}\n                </TableBody>\n            )\n        }\n    }\n\n    /**\n     * Removes a single row at the index specified\n     */\n    const removeSelectedRow = (rowIndex: number) => {\n        let newTableData = [...tableData];\n        newTableData.splice(rowIndex, 1);\n        setTableData(newTableData);\n    }\n\n    const removeSelectedColumn = (colIndex: number) => {\n        let newTableData = [...tableData];\n        newTableData.forEach(row => {\n            row.splice(colIndex, 1);\n        });\n        setColumnSize(col - 1);\n        setTableData(newTableData);\n    }\n\n    return (\n        <>\n            <HorizontalDiv>\n                <StyledLabel htmlFor=\"csv-file\">\n                    Import .csv\n                </StyledLabel>\n                <StyledFileInput id=\"csv-file\" onChange={(e) => loadCsv(e)} type=\"file\" accept=\".csv\"></StyledFileInput>\n            </HorizontalDiv>\n            <HorizontalDiv>\n                <StyledToggleButton isActive={useVerticalHeaders} onToggle={handleToggleVerticalHeaders}\n                >Vertical Headers</StyledToggleButton>\n                <StyledToggleButton isActive={useHorizontalHeaders} onToggle={handleToggleHorizontalHeaders}\n                >Horizontal Headers</StyledToggleButton>\n            </HorizontalDiv>\n            <HorizontalDiv>\n                <StyledButton isFullWidth={true} buttonType=\"primary\" size=\"small\" icon=\"Plus\" onClick={addRow} aria-label=\"Add new row\">Row</StyledButton>\n                <StyledButton isFullWidth={true} buttonType=\"primary\" size=\"small\" icon=\"Minus\" onClick={removeRow} aria-label=\"Remove end row\">Row</StyledButton>\n                <StyledButton isFullWidth={true} buttonType=\"primary\" size=\"small\" icon=\"Plus\" aria-label=\"Add new column\" onClick={addCol}>Column</StyledButton>\n                <StyledButton isFullWidth={true} buttonType=\"primary\" size=\"small\" icon=\"Minus\" aria-label=\"Remove end column\" onClick={removeEndCol}>Column</StyledButton>\n            </HorizontalDiv>\n            <StyledTableContainer>\n                <Table>\n                    {renderTable()}\n                </Table>\n            </StyledTableContainer>\n            <Subheading>\n                Grid Dimensions: {tableData.length} x {col}\n            </Subheading>\n            <HelpText>\n                {'You can use basic text modifiers to alter text. bold: **your text**, strike through: ~~your text~~, underline: <u>your text</u>, links: [link title](link url)'}\n            </HelpText>\n        </>\n    )\n}\n\nexport default TableExtension;","import './App.css';\nimport TableExtension from \"./components/Table/Table.component\";\nimport styled from 'styled-components';\n\nconst AppContainer = styled.div`\n  overflow: hidden;\n  border-radius: 10px;\n`;\n\n\nfunction App() {\n    return (\n      <AppContainer className=\"App\">\n        <header className=\"App-header\">\n          <TableExtension></TableExtension>\n        </header>\n      </AppContainer>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}