{"version":3,"sources":["components/Table/Table.component.tsx","App.js","reportWebVitals.js","index.js"],"names":["TableCell","styled","th","td","TableRow","tr","HorizontalDiv","div","TableExtension","props","init","sdk","console","log","location","window","startAutoResizer","useState","tableData","setTableData","row","col","setCol","useHeader","toggleHeader","renderRow","rowIdx","map","item","cellIdx","name","id","labelText","aria-label","onChange","e","event","newTableData","target","value","updateCellData","textarea","buttonType","onClick","table","additionalRow","Array","fill","push","pop","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAYMA,GAJcC,IAAOC,GAAV,yDAICD,IAAOE,GAAV,iDAITC,EAAWH,IAAOI,GAAV,kGAKRC,EAAgBL,IAAOM,IAAV,wJAiKJC,EAtIQ,SAACC,GAMxBC,gBAAK,SAACC,GACEC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAIG,UAEhBH,EAAII,OAAOC,sBAVoB,MAiBDC,mBAAgB,IAjBf,mBAiB5BC,EAjB4B,KAiBjBC,EAjBiB,OAkBbF,mBAAmB,IAlBN,mBAkB5BG,EAlB4B,aAmBbH,mBAAiB,IAnBJ,mBAmB5BI,EAnB4B,KAmBvBC,EAnBuB,OA4BDL,oBAAS,GA5BR,mBA4B5BM,EA5B4B,KA4BjBC,EA5BiB,KAyF7BC,EAAY,SAACL,EAAeM,GAC9B,OAAON,EAAIO,KAAI,SAACC,EAAMC,GAClB,OAAO,cAAC7B,EAAD,UACH,cAAC,YAAD,CACI8B,KAAI,sBAAiBJ,EAAjB,aAA4BG,GAChCE,GAAE,sBAAiBL,EAAjB,aAA4BG,GAC9BG,UAAS,GAETC,aAAA,wBAA6BP,EAA7B,kBAA6CG,GAC7CK,SAAU,SAAAC,GAAC,OAjBJ,SAACC,EAAYV,EAAgBG,GAChD,IAAIQ,EAAY,YAAOnB,GACvBmB,EAAaX,GAAQG,GAAWO,EAAME,OAAOC,MAC7CpB,EAAakB,GACbzB,QAAQC,IAAI,CAAEK,cAaasB,CAAeL,EAAGT,EAAQG,IACzCY,UAAQ,UAMxB,OACI,qCACI,kCACI,gCACI,yBAIJ,gCA1CDvB,EAAUS,KAAI,SAACP,EAAKM,GACvB,OAAO,cAACtB,EAAD,UACFqB,EAAUL,EAAKM,IADE,MAAQA,WA6C9B,wCACUN,EADV,UACsBC,KAEtB,wBAGA,eAACf,EAAD,WACI,cAAC,SAAD,CAAQoC,WAAW,UAAUC,QA3F1B,WACX,KAAItB,GAAO,GAAX,CAGA,IAAIuB,EAAY,YAAO1B,GACnB2B,EAAgB,IAAIC,MAAMzB,GAAK0B,KAAK,MACxCH,EAAMI,KAAKH,GACX1B,EAAayB,GACbhC,QAAQC,IAAI,CAAEK,gBAmFN,qBACA,cAAC,SAAD,CAAQwB,WAAW,UAAUC,QAjEvB,WACd,IAAIN,EAAY,YAAOnB,GACvBmB,EAAaY,MACb9B,EAAakB,IA8DL,wBACA,cAAC,SAAD,CAAQK,WAAW,UAAUC,QAlF1B,WACXrB,EAAOD,EAAM,IAiFL,wBACA,cAAC,SAAD,CAAQqB,WAAW,UAAUC,QA1EvB,WACdrB,EAAOD,EAAM,IAyEL,2BACA,cAAC,SAAD,CAAQqB,WAAW,UAAUC,QAxGd,WACvBnB,GAAcD,IAuGN,kCChKD2B,MAZf,WACI,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCIKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3608aa80.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\nimport { Button, SkeletonDisplayText, TextField } from '@contentful/forma-36-react-components';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport styled from \"styled-components\";\nimport { render } from '@testing-library/react';\n\nimport { init, locations, Locations } from \"@contentful/app-sdk\";\n\nconst TableHeader = styled.th`\n    background-color: pink;\n`;\n\nconst TableCell = styled.td`\n    padding: 0rem;\n`\n\nconst TableRow = styled.tr`\n    padding: 0em;\n    margin: 0em;\n    // background-color: green;\n`\nconst HorizontalDiv = styled.div`\n    display: flex;\n    // margin: 1rem;\n    flex-direction: horizontal;\n    \n    > * {\n        margin: 0.5rem;\n    }\n`;\n\n// TODO: Import in form 36 fcss for more consistent styling\n\n// import Cell from '../'\n// import Row from '../'\n\nconst Row = () => {\n    return (\n        <tr>\n\n        </tr>\n    )\n}\n\n\n\n\n\nconst TableExtension = (props: any) => {\n\n    // let { sdk } = props;\n\n    // console.log(sdk);\n\ninit((sdk) => {\n        console.log(sdk);\n        console.log(sdk.location);\n\n        sdk.window.startAutoResizer();\n        \n    });\n\n\n\n    // a set of rows.\n    const [tableData, setTableData] = useState<any[]>([]);\n    const [row, setRow] = useState<string[]>([]);\n    const [col, setCol] = useState<number>(0);\n\n    // thoughts: adding row / cell alter the data, re-render the whole table based on when the data model changes.\n    // adding row/ column will add empty table objects which will be rendered \n\n    const handleToggleHeader = () => {\n        toggleHeader(!useHeader);\n    }\n\n    const [useHeader, toggleHeader] = useState(true);\n\n    /**\n     * Adds a row to the table with a size determined by the current column count.\n     */\n    const addRow = () => {\n        if (col <= 0)   {\n            return;\n        }\n        let table: any[] = [...tableData];\n        let additionalRow = new Array(col).fill(null);\n        table.push(additionalRow);\n        setTableData(table);\n        console.log({ tableData });\n    }\n\n    const addCol = () => {\n        setCol(col + 1);\n        // let newTable = [...tableData];\n        // TODO: expand all columns for existing rows?\n    }\n\n    /**\n     * reduces the column size for the next row to be created\n     */\n    const removeCol = () => {\n        setCol(col - 1);\n    }\n\n    /**\n     * removes the end/bottom row of the table\n     */\n    const removeRow = () => {\n        let newTableData = [...tableData];\n        newTableData.pop();\n        setTableData(newTableData);\n    }\n\n    const renderHeader = () => {\n        console.log('hi');\n    }\n\n    const renderTableBody = () => {\n        return tableData.map((row, rowIdx) => {\n            return <TableRow key={\"row\" + rowIdx}>\n                {renderRow(row, rowIdx)}\n            </TableRow>\n        });\n    }\n\n    /**\n     * Updates the table data with values from a table cell.\n     */\n    const updateCellData = (event: any, rowIdx: number, cellIdx: number) => {\n        let newTableData = [...tableData]; // copy the object\n        newTableData[rowIdx][cellIdx] = event.target.value // update the singular cell entry\n        setTableData(newTableData); // update the tableData state. (not sure if it's necessary?)\n        console.log({ tableData });\n    }\n\n\n    const renderRow = (row: string[], rowIdx: number) => {\n        return row.map((item, cellIdx) => {\n            return <TableCell>\n                <TextField\n                    name={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    id={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    labelText={``}\n                    // helpText={`Input your text.`}\n                    aria-label={`Input for row ${rowIdx}, cell ${cellIdx}`}\n                    onChange={e => updateCellData(e, rowIdx, cellIdx)}\n                    textarea\n                ></TextField>\n            </TableCell>\n        });\n    }\n\n    return (\n        <>\n            <table>\n                <thead>\n                    <tr>\n                        {/* {renderHeader()} */}\n                    </tr>\n                </thead>\n                <tbody>\n                    {renderTableBody()}\n                </tbody>\n            </table>\n            <div>\n                Row: {row}, Col: {col}\n            </div>\n            <div>\n\n            </div>\n            <HorizontalDiv>\n                <Button buttonType=\"primary\" onClick={addRow}>Add Row</Button>\n                <Button buttonType=\"primary\" onClick={removeRow}>Remove Row</Button>\n                <Button buttonType=\"primary\" onClick={addCol}>Add Column</Button>\n                <Button buttonType=\"primary\" onClick={removeCol}>Remove Column</Button>\n                <Button buttonType=\"primary\" onClick={handleToggleHeader}>Toggle Header</Button>\n            </HorizontalDiv>\n        </>\n    )\n}\n\nexport default TableExtension;\n\n\n\n// build the html for the rows, create the data on save? Data should be a variable as it's to re-render the page.","import './App.css';\nimport TableExtension from \"./components/Table/Table.component\";\n// import { init } from \"@contentful/app-sdk\";\n\nfunction App() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <TableExtension></TableExtension>\n        </header>\n      </div>\n    );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}