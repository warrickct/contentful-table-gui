{"version":3,"sources":["components/Table/Table.component.tsx","App.js","reportWebVitals.js","index.js"],"names":["StyledTableHead","styled","TableHead","StyledTableContainer","div","StyledTableRow","TableRow","HorizontalDiv","TableExtension","props","useState","tableData","setTableData","col","setColumnSize","useHeader","setHeader","useEffect","init","sdk","window","startAutoResizer","data","field","getValue","updateTableStateAndField","setValue","renderTableRows","start","end","length","styledRows","rowIdx","row","push","renderTableCells","onClick","removeSelectedRow","map","item","cellIdx","name","id","labelText","value","aria-label","onChange","e","event","newTableData","target","updateCellData","textarea","csvToTable","text","maxCols","split","line","cells","rowIndex","splice","files","reader","FileReader","onload","result","csvText","console","log","readAsText","loadCsv","type","accept","isActive","onToggle","buttonType","size","table","additionalRow","Array","fill","pop","newColSize","newTable","forEach","index","row2","concat","newColumnSize","slice","AppContainer","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b8d760e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n    Button,\n    TextField,\n    TableBody,\n    TableCell,\n    TableRow,\n    Table,\n    TableHead,\n    ToggleButton,\n    Subheading\n} from '@contentful/forma-36-react-components';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport styled from \"styled-components\";\nimport { init } from \"@contentful/app-sdk\";\n\n\n// background-color: ${(props: any) => props.headers === 'true' ? \"#798cd4\" : 'white'}\nconst StyledTableHead = styled(TableHead)`\n        th {\n            background-color: #8897cf;\n        }\n    `;\n\nconst StyledTableContainer = styled.div`\n    width: 100%;\n    overflow-x: auto;\n    padding: 1rem;\n    display: flex;\n    flex-direction: row;\n    background-color: red;\n`;\n\nconst StyledTableRow = styled(TableRow)`\n    background-color: white;\n`;\n\nconst HorizontalDiv = styled.div`\n    display: flex;\n    // margin: 1rem;\n    flex-direction: horizontal;\n    \n    > * {\n        margin: 0.25rem;\n    }\n`;\n\nconst TableExtension = (props: any) => {\n\n    const [tableData, setTableData] = useState<any[]>([]);\n    const [col, setColumnSize] = useState<number>(3);\n    const [useHeader, setHeader] = useState(true);\n\n    /**\n     * Starts the entension window auto resizing and unpacks saved table data and metadata.\n     */\n    const initializeExtension = () => {\n        init((sdk: any) => {\n            sdk.window.startAutoResizer();\n            let data = sdk.field.getValue();\n            setTableData(data.tableData);\n            setHeader(data.useHeader);\n        });\n    }\n\n    useEffect(() => {\n        initializeExtension();\n    }, [])\n\n    const handleToggleHeader = () => {\n        console.log({ tableData });\n        setHeader(!useHeader);\n        updateTableStateAndField(tableData);\n    }\n\n\n    /** wrapper to ensure table changes synchronize with contentful field value changes. */\n    const updateTableStateAndField = (tableData: any[]) => {\n        // updating react component state\n        setTableData(tableData);\n\n        // // update the field value\n        init((sdk: any) => {\n            sdk.field.setValue({\n                useHeader,\n                tableData\n            });\n        })\n    }\n\n    /**\n     * Adds a row to the table with a size determined by the current column count.\n     */\n    const addRow = () => {\n        if (col <= 0) {\n            return;\n        }\n        let table: any[] = [...tableData];\n        let additionalRow = new Array(col).fill(null);\n        table.push(additionalRow);\n        updateTableStateAndField(table);\n    }\n\n    const addCol = () => {\n        let newColSize = col + 1;\n        setColumnSize(newColSize);\n        // go through all the pre-existing rows and increase their size.\n        let newTable = [...tableData];\n        // console.log({newTable});\n        newTable.forEach((row, index) => {\n            if (row.length < newColSize) {\n                // increase the row size.\n                let row2 = row.concat(new Array(newColSize - row.length).fill(null));\n                newTable[index] = row2;\n            }\n        });\n        // console.table(newTable);\n        updateTableStateAndField(newTable);\n\n    }\n\n    /**\n     * reduces the column size for the next row to be created\n     */\n    const removeCol = () => {\n        if (col <= 0) {\n            return;\n        }\n        let newColumnSize = col - 1;\n        setColumnSize(newColumnSize);\n\n        // go through all the pre-existing rows and increase their size.\n        let newTable = [...tableData];\n        // console.log({newTable});\n        newTable.forEach((row, index) => {\n            if (row.length > newColumnSize) {\n                console.log('reducing column size');\n                // increase the row size.\n                let row2 = row.slice(0, newColumnSize);\n                newTable[index] = row2;\n            }\n        });\n        // console.table(newTable);\n        updateTableStateAndField(newTable);\n    }\n\n    /**\n     * removes the end/bottom row of the table\n     */\n    const removeRow = () => {\n        if (tableData.length <= 0) {\n            return;\n        }\n        let newTableData = [...tableData];\n        newTableData.pop();\n        updateTableStateAndField(newTableData);\n    }\n\n    /**\n     * Generates the table rows from table data\n     * @param start starting index of the rows you wish to render\n     * @param end index to end rendering rows\n     */\n    const renderTableRows = (start: number | null = null, end: number | null = null) => {\n        if (tableData.length <= 0) {\n            return;\n        }\n        let styledRows = [];\n        // remapping the values to work with for-loop\n        start = start ? start : 0;\n        end = end ? end : tableData.length;\n        for (let rowIdx = start; rowIdx < end; rowIdx++) {\n            let row = tableData[rowIdx];\n            styledRows.push(\n                <>\n                    <StyledTableRow key={\"row\" + rowIdx}>\n                        {renderTableCells(row, rowIdx)}\n                        <Button onClick={() => removeSelectedRow(rowIdx)}>X</Button>\n                    </StyledTableRow>\n                </>\n            )\n        }\n        return styledRows;\n    }\n\n    /**\n     * Updates the table data with values from a table cell.\n     */\n    const updateCellData = (event: any, rowIdx: number, cellIdx: number) => {\n        let newTableData = [...tableData]; // copy the object\n        newTableData[rowIdx][cellIdx] = event.target.value // update the singular cell entry\n        updateTableStateAndField(newTableData); // update the tableData state. (not sure if it's necessary?)\n    }\n\n    /**\n     * Creates the cells of a row within the table\n     * @param row A row which is an array of string values\n     * @param rowIdx The index of the row currently being created\n     */\n    const renderTableCells = (row: string[], rowIdx: number) => {\n        return row.map((item, cellIdx) => {\n            return <TableCell>\n                { rowIdx === 0  ?\n                    <Button>X</Button>\n                    :\n                    null\n                }\n                <TextField\n                    name={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    id={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    labelText={``}\n                    value={item}\n                    // helpText={`Input your text.`}\n                    aria-label={`Input for row ${rowIdx}, cell ${cellIdx}`}\n                    onChange={e => updateCellData(e, rowIdx, cellIdx)}\n                    textarea\n                ></TextField>\n            </TableCell>\n        });\n    }\n\n    /**\n     * Loads a csv file into the table component.\n     * @param e event\n     */\n    const loadCsv = (e: any) => {\n        let files = e.target.files;\n        let reader = new FileReader();\n        reader.onload = function (e) {\n            if (e && e.target && e.target.result) {\n                let csvText = e.target.result;\n                console.log(typeof (csvText));\n                if (typeof (csvText) == 'string') {\n                    csvToTable(csvText);\n                }\n            }\n        };\n        reader.readAsText(files[0]);\n    }\n\n    /**\n     * Converts a csv formatted text into a 2D table data array.\n     */\n    const csvToTable = (text: string) => {\n        let maxCols = 0;\n        let lines = text.split('\\n');\n        let newTableData = lines.map((line: string) => {\n            let cells = line.split(',');\n            // update column setting for the table\n            maxCols = maxCols < cells.length ? cells.length : maxCols;\n            return cells;\n        });\n        setColumnSize(maxCols);\n        updateTableStateAndField(newTableData);\n    }\n\n    /**\n     * Determines what table type to create and renders it.\n     */\n    const renderTable = () => {\n        if (useHeader) {\n            return (\n                <>\n                    <StyledTableHead>\n                        {renderTableRows(0, 1)}\n                    </StyledTableHead>\n                    <TableBody>\n                        {renderTableRows(1)}\n                    </TableBody>\n                </>\n            )\n        } else {\n            return (\n                <TableBody>\n                    {renderTableRows()}\n                </TableBody>\n            )\n        }\n    }\n\n    /**\n     * Removes a single row at the index specified\n     */\n    const removeSelectedRow = (rowIndex: any) => {\n        let newTableData = [...tableData];\n        newTableData.splice(rowIndex, 1);\n        updateTableStateAndField(newTableData);\n    }\n\n    return (\n        <>\n            <input onChange={(e) => loadCsv(e)} type=\"file\" accept=\".csv\"></input>\n            <StyledTableContainer>\n                <Table>\n                    {renderTable()}\n                </Table>\n            </StyledTableContainer>\n            <Subheading>\n                Rows: {tableData.length} Columns: {col}\n            </Subheading>\n            <HorizontalDiv>\n                <ToggleButton isActive={useHeader} onToggle={handleToggleHeader}\n                >Headers</ToggleButton>\n            </HorizontalDiv>\n            <HorizontalDiv>\n                <Button buttonType=\"primary\" size=\"small\" onClick={addRow}>Add Row</Button>\n                <Button buttonType=\"primary\" size=\"small\" onClick={removeRow}>Remove Row</Button>\n            </HorizontalDiv>\n            <HorizontalDiv>\n                <Button buttonType=\"primary\" size=\"small\" onClick={addCol}>Add Column</Button>\n                <Button buttonType=\"primary\" size=\"small\" onClick={removeCol}>Remove Column</Button>\n            </HorizontalDiv>\n        </>\n    )\n}\n\nexport default TableExtension;","import './App.css';\nimport TableExtension from \"./components/Table/Table.component\";\nimport styled from 'styled-components';\n\nconst AppContainer = styled.div`\n  overflow: hidden;\n  border-radius: 10px;\n`;\n\n\nfunction App() {\n    return (\n      <AppContainer className=\"App\">\n        <header className=\"App-header\">\n          <TableExtension></TableExtension>\n        </header>\n      </AppContainer>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}