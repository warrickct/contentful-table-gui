{"version":3,"sources":["logo.svg","components/Table/Table.component.tsx","App.js","reportWebVitals.js","index.js"],"names":["TableCell","styled","th","td","TableRow","tr","HorizontalDiv","div","Table","useState","tableData","setTableData","row","col","setCol","useHeader","toggleHeader","renderRow","rowIdx","map","item","cellIdx","name","id","labelText","aria-label","onChange","e","event","newTableData","target","value","console","log","updateCellData","textarea","buttonType","onClick","table","additionalRow","Array","fill","push","pop","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,I,8DCUTA,GAJcC,IAAOC,GAAV,yDAICD,IAAOE,GAAV,iDAITC,EAAWH,IAAOI,GAAV,kGAKRC,EAAgBL,IAAOM,IAAV,wJA6KJC,EAtJD,WAAM,MAIkBC,mBAAgB,IAJlC,mBAITC,EAJS,KAIEC,EAJF,OAKMF,mBAAmB,IALzB,mBAKTG,EALS,aAMMH,mBAAiB,IANvB,mBAMTI,EANS,KAMJC,EANI,OAekBL,oBAAS,GAf3B,mBAeTM,EAfS,KAeEC,EAfF,KAyGVC,EAAY,SAACL,EAAeM,GAC9B,OAAON,EAAIO,KAAI,SAACC,EAAMC,GAClB,OAAO,cAACrB,EAAD,UACH,cAAC,YAAD,CACIsB,KAAI,sBAAiBJ,EAAjB,aAA4BG,GAChCE,GAAE,sBAAiBL,EAAjB,aAA4BG,GAC9BG,UAAS,GAETC,aAAA,wBAA6BP,EAA7B,kBAA6CG,GAC7CK,SAAU,SAAAC,GAAC,OAjBJ,SAACC,EAAYV,EAAgBG,GAChD,IAAIQ,EAAY,YAAOnB,GACvBmB,EAAaX,GAAQG,GAAWO,EAAME,OAAOC,MAC7CpB,EAAakB,GACbG,QAAQC,IAAI,CAAEvB,cAaawB,CAAeP,EAAGT,EAAQG,IACzCc,UAAQ,UAMxB,OACI,qCACI,kCACI,gCACI,yBAIJ,gCA1CDzB,EAAUS,KAAI,SAACP,EAAKM,GACvB,OAAO,cAACd,EAAD,UACFa,EAAUL,EAAKM,IADE,MAAQA,WA6C9B,wCACUN,EADV,UACsBC,KAEtB,wBAGA,eAACP,EAAD,WACI,cAAC,SAAD,CAAQ8B,WAAW,UAAUC,QAxH1B,WAWX,IAAIC,EAAY,YAAO5B,GACnB6B,EAAgB,IAAIC,MAAM3B,GAAK4B,KAAK,MACxCH,EAAMI,KAAKH,GAGX5B,EAAa2B,GACbN,QAAQC,IAAI,CAAEvB,eAuGN,qBACA,cAAC,SAAD,CAAQ0B,WAAW,UAAUC,QAjEvB,WACd,IAAIR,EAAY,YAAOnB,GACvBmB,EAAac,MACbhC,EAAakB,IA8DL,wBACA,cAAC,SAAD,CAAQO,WAAW,UAAUC,QAtG1B,WACXvB,EAAOD,EAAM,GAGD,YAAOH,IAkGX,wBACA,cAAC,SAAD,CAAQ0B,WAAW,UAAUC,QA1EvB,WACdvB,EAAOD,EAAM,IAyEL,2BACA,cAAC,SAAD,CAAQuB,WAAW,UAAUC,QArId,WACvBrB,GAAcD,IAoIN,kCChKD6B,MAtBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAaI,cAAC,EAAD,SCRKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2524bfe4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component, useState } from 'react';\nimport { Button, TextField } from '@contentful/forma-36-react-components';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport styled from \"styled-components\";\nimport { render } from '@testing-library/react';\n\nconst TableHeader = styled.th`\n    background-color: pink;\n`;\n\nconst TableCell = styled.td`\n    padding: 0rem;\n`\n\nconst TableRow = styled.tr`\n    padding: 0em;\n    margin: 0em;\n    // background-color: green;\n`\nconst HorizontalDiv = styled.div`\n    display: flex;\n    // margin: 1rem;\n    flex-direction: horizontal;\n    \n    > * {\n        margin: 0.5rem;\n    }\n`;\n\n// TODO: Import in form 36 fcss for more consistent styling\n\n// import Cell from '../'\n// import Row from '../'\n\nconst Row = () => {\n    return (\n        <tr>\n\n        </tr>\n    )\n}\n\nconst Table = () => {\n    // these might cause re-render loop?\n\n    // a set of rows.\n    const [tableData, setTableData] = useState<any[]>([]);\n    const [row, setRow] = useState<string[]>([]);\n    const [col, setCol] = useState<number>(0);\n\n    // thoughts: adding row / cell alter the data, re-render the whole table based on when the data model changes.\n    // adding row/ column will add empty table objects which will be rendered \n\n    const handleToggleHeader = () => {\n        toggleHeader(!useHeader);\n    }\n\n    const [useHeader, toggleHeader] = useState(true);\n\n    /**\n     * Adds a row to the table with a size determined by the current column count.\n     */\n    const addRow = () => {\n        // little bit of admin surrounding adding row. If row is reduced and data inside, maybe add alert?\n        // setRowCount(rowCount.push([]))\n\n        // let newTable = tableData;\n        // console.log({newTable});\n\n        // let newArr = [...newTable];\n        // console.log({newArr}); \n\n        // add a row to the table, the size of the column size.\n        let table: any[] = [...tableData];\n        let additionalRow = new Array(col).fill(null);\n        table.push(additionalRow);\n\n        // console.log({table});\n        setTableData(table);\n        console.log({ tableData });\n    }\n\n    const addCol = () => {\n        setCol(col + 1);\n        // copy current table\n        // let newTable = tableData;\n        let newTable = [...tableData];\n        // console.log({ newTable });\n\n        // // iterate through table rows\n        // newTable.map((row, index) => {\n        //     // if curRow length < col\n        //     if (row.length < col) {\n        //         // copy cur Row and create new, larger row w/ old values spread into it\n        //         let newRow = new Array(col);\n\n\n        //         // TODO: this isn't right. Should be some padding function\n        //         newRow.push(...row);\n\n        //         // store the new row with pad\n        //     }\n        // })\n\n\n        // table[that row]\n    }\n\n    /**\n     * reduces the column size for the next row to be created\n     */\n    const removeCol = () => {\n        setCol(col - 1);\n    }\n\n    /**\n     * removes the end/bottom row of the table\n     */\n    const removeRow = () => {\n        let newTableData = [...tableData];\n        newTableData.pop();\n        setTableData(newTableData);\n    }\n\n    const renderHeader = () => {\n        console.log('hi');\n    }\n\n    const renderTableBody = () => {\n        return tableData.map((row, rowIdx) => {\n            return <TableRow key={\"row\" + rowIdx}>\n                {renderRow(row, rowIdx)}\n            </TableRow>\n        });\n    }\n\n    /**\n     * Updates the table data with values from a table cell.\n     */\n    const updateCellData = (event: any, rowIdx: number, cellIdx: number) => {\n        let newTableData = [...tableData]; // copy the object\n        newTableData[rowIdx][cellIdx] = event.target.value // update the singular cell entry\n        setTableData(newTableData); // update the tableData state. (not sure if it's necessary?)\n        console.log({ tableData });\n    }\n\n\n    const renderRow = (row: string[], rowIdx: number) => {\n        return row.map((item, cellIdx) => {\n            return <TableCell>\n                <TextField\n                    name={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    id={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    labelText={``}\n                    // helpText={`Input your text.`}\n                    aria-label={`Input for row ${rowIdx}, cell ${cellIdx}`}\n                    onChange={e => updateCellData(e, rowIdx, cellIdx)}\n                    textarea\n                ></TextField>\n            </TableCell>\n        });\n    }\n\n    return (\n        <>\n            <table>\n                <thead>\n                    <tr>\n                        {/* {renderHeader()} */}\n                    </tr>\n                </thead>\n                <tbody>\n                    {renderTableBody()}\n                </tbody>\n            </table>\n            <div>\n                Row: {row}, Col: {col}\n            </div>\n            <div>\n\n            </div>\n            <HorizontalDiv>\n                <Button buttonType=\"primary\" onClick={addRow}>Add Row</Button>\n                <Button buttonType=\"primary\" onClick={removeRow}>Remove Row</Button>\n                <Button buttonType=\"primary\" onClick={addCol}>Add Column</Button>\n                <Button buttonType=\"primary\" onClick={removeCol}>Remove Column</Button>\n                <Button buttonType=\"primary\" onClick={handleToggleHeader}>Toggle Header</Button>\n            </HorizontalDiv>\n        </>\n    )\n}\n\nexport default Table;\n\n\n\n// build the html for the rows, create the data on save? Data should be a variable as it's to re-render the page.","import logo from './logo.svg';\nimport './App.css';\nimport Table from \"./components/Table/Table.component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n          <Table></Table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}