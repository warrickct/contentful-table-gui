{"version":3,"sources":["components/Table/Table.component.tsx","App.js","reportWebVitals.js","index.js"],"names":["TableCell","styled","th","td","TableRow","tr","HorizontalDiv","div","TableExtension","props","init","sdk","window","startAutoResizer","useState","tableData","setTableData","col","setCol","useHeader","toggleHeader","updateTableStateAndField","field","setValue","console","log","getValue","renderRow","row","rowIdx","map","item","cellIdx","name","id","labelText","aria-label","onChange","e","event","newTableData","target","value","updateCellData","textarea","length","buttonType","onClick","table","additionalRow","Array","fill","push","pop","AppContainer","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAgBMA,GARcC,IAAOC,GAAV,yDAQCD,IAAOE,GAAV,iDAKTC,EAAWH,IAAOI,GAAV,kGAKRC,EAAgBL,IAAOM,IAAV,wJAiKJC,EArJQ,SAACC,GAEpBC,gBAAK,SAACC,GACFA,EAAIC,OAAOC,sBAHoB,MAODC,mBAAgB,IAPf,mBAO5BC,EAP4B,KAOjBC,EAPiB,OAQbF,mBAAmB,IARN,gCASbA,mBAAiB,IATJ,mBAS5BG,EAT4B,KASvBC,EATuB,OAUDJ,oBAAS,GAVR,mBAU5BK,EAV4B,KAUjBC,EAViB,KAmB7BC,EAA2B,SAACN,GAE9BC,EAAaD,GAGbL,gBAAK,SAACC,GACFA,EAAIW,MAAMC,SAAS,CACfJ,YACAJ,cAGJS,QAAQC,IAAId,EAAIW,MAAMI,gBAiExBC,EAAY,SAACC,EAAeC,GAC9B,OAAOD,EAAIE,KAAI,SAACC,EAAMC,GAClB,OAAO,cAAChC,EAAD,UACH,cAAC,YAAD,CACIiC,KAAI,sBAAiBJ,EAAjB,aAA4BG,GAChCE,GAAE,sBAAiBL,EAAjB,aAA4BG,GAC9BG,UAAS,GAITC,aAAA,wBAA6BP,EAA7B,kBAA6CG,GAC7CK,SAAU,SAAAC,GAAC,OAxBJ,SAACC,EAAYV,EAAgBG,GAChD,IAAIQ,EAAY,YAAOzB,GACvByB,EAAaX,GAAQG,GAAWO,EAAME,OAAOC,MAC7CrB,EAAyBmB,GACzBhB,QAAQC,IAAI,CAAEV,cAoBa4B,CAAeL,EAAGT,EAAQG,IACzCY,UAAQ,UAMxB,OACI,qCACI,kCACI,gCACI,yBAIJ,gCAjDD7B,EAAUe,KAAI,SAACF,EAAKC,GACvB,OAAO,cAACzB,EAAD,UACFuB,EAAUC,EAAKC,IADE,MAAQA,WAoD9B,yCACWd,EAAU8B,OADrB,cACwC5B,KAExC,4CACeE,EAAY,KAAO,SAElC,wBAGA,eAACb,EAAD,WACI,cAAC,SAAD,CAAQwC,WAAW,UAAUC,QAhG1B,WACX,KAAI9B,GAAO,GAAX,CAGA,IAAI+B,EAAY,YAAOjC,GACnBkC,EAAgB,IAAIC,MAAMjC,GAAKkC,KAAK,MACxCH,EAAMI,KAAKH,GACX5B,EAAyB2B,GACzBxB,QAAQC,IAAI,CAAEV,gBAwFN,qBACA,cAAC,SAAD,CAAQ+B,WAAW,UAAUC,QAvEvB,WACd,IAAIP,EAAY,YAAOzB,GACvByB,EAAaa,MACbhC,EAAyBmB,IAoEjB,2BAEJ,eAAClC,EAAD,WACI,cAAC,SAAD,CAAQwC,WAAW,UAAUC,QAzF1B,WACX7B,EAAOD,EAAM,IAwFL,wBACA,cAAC,SAAD,CAAQ6B,WAAW,UAAUC,QAlFvB,WACd7B,EAAOD,EAAM,IAiFL,8BAEJ,cAACX,EAAD,UACI,cAAC,SAAD,CAAQwC,WAAW,UAAUC,QAnId,WACvB3B,GAAcD,GACdE,EAAyBN,IAiIjB,iCCjLVuC,EAAerD,IAAOM,IAAV,yEAgBHgD,MAVf,WACI,OACE,cAACD,EAAD,CAAcE,UAAU,MAAxB,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCFKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1890e0bf.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\nimport { Button, SkeletonDisplayText, TextField } from '@contentful/forma-36-react-components';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport styled from \"styled-components\";\nimport { render } from '@testing-library/react';\n\nimport { init, locations, Locations } from \"@contentful/app-sdk\";\n\nconst TableHeader = styled.th`\n    background-color: pink;\n`;\n\n// interface TableCellProps {\n//     useHeader: boolean;\n// }\n\nconst TableCell = styled.td`\n    padding: 0rem;\n`\n    // TODO: Add dynamic header color based on state -- background-color: ${(props: TableCellProps) => props.useHeader ? \"#ffffff\" : \"#e2e2e2\"};\n\nconst TableRow = styled.tr`\n    padding: 0em;\n    margin: 0em;\n    // background-color: green;\n`\nconst HorizontalDiv = styled.div`\n    display: flex;\n    // margin: 1rem;\n    flex-direction: horizontal;\n    \n    > * {\n        margin: 0.5rem;\n    }\n`;\n\n// TODO: Import in form 36 fcss for more consistent styling\n\nconst TableExtension = (props: any) => {\n\n    init((sdk: any) => {\n        sdk.window.startAutoResizer();\n    });\n\n    // a set of rows.\n    const [tableData, setTableData] = useState<any[]>([]);\n    const [row, setRow] = useState<string[]>([]);\n    const [col, setCol] = useState<number>(0);\n    const [useHeader, toggleHeader] = useState(true);\n\n    const handleToggleHeader = () => {\n        toggleHeader(!useHeader);\n        updateTableStateAndField(tableData);\n    }\n\n\n    /** wrapper to ensure table changes synchronize with contentful field value changes. */\n    const updateTableStateAndField = (tableData: any[]) => {\n        // updating react component state\n        setTableData(tableData);\n\n        // // update the field value\n        init((sdk: any) => {\n            sdk.field.setValue({\n                useHeader,\n                tableData\n            });\n\n            console.log(sdk.field.getValue());\n        })\n    }\n\n\n\n    /**\n     * Adds a row to the table with a size determined by the current column count.\n     */\n    const addRow = () => {\n        if (col <= 0) {\n            return;\n        }\n        let table: any[] = [...tableData];\n        let additionalRow = new Array(col).fill(null);\n        table.push(additionalRow);\n        updateTableStateAndField(table);\n        console.log({ tableData });\n    }\n\n    const addCol = () => {\n        setCol(col + 1);\n        // TODO: expand all columns for existing rows?\n    }\n\n    /**\n     * reduces the column size for the next row to be created\n     */\n    const removeCol = () => {\n        setCol(col - 1);\n    }\n\n    /**\n     * removes the end/bottom row of the table\n     */\n    const removeRow = () => {\n        let newTableData = [...tableData];\n        newTableData.pop();\n        updateTableStateAndField(newTableData);\n    }\n\n    const renderTableBody = () => {\n        return tableData.map((row, rowIdx) => {\n            return <TableRow key={\"row\" + rowIdx}>\n                {renderRow(row, rowIdx)}\n            </TableRow>\n        });\n    }\n\n    /**\n     * Updates the table data with values from a table cell.\n     */\n    const updateCellData = (event: any, rowIdx: number, cellIdx: number) => {\n        let newTableData = [...tableData]; // copy the object\n        newTableData[rowIdx][cellIdx] = event.target.value // update the singular cell entry\n        updateTableStateAndField(newTableData); // update the tableData state. (not sure if it's necessary?)\n        console.log({ tableData });\n    }\n\n\n    /**\n     * Creates a row within the table\n     * @param row A row which is an array of string values\n     * @param rowIdx The index of the row currently being created\n     */\n    const renderRow = (row: string[], rowIdx: number) => {\n        return row.map((item, cellIdx) => {\n            return <TableCell>\n                <TextField\n                    name={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    id={`table-cell-y${rowIdx}-x${cellIdx}`}\n                    labelText={``}\n                    // helpText={`Input your text.`}\n                    // TODO: Implement better header visual indicator\n                    // helpText={rowIdx == 0  && useHeader ? 'Header' : ''}\n                    aria-label={`Input for row ${rowIdx}, cell ${cellIdx}`}\n                    onChange={e => updateCellData(e, rowIdx, cellIdx)}\n                    textarea\n                ></TextField>\n            </TableCell>\n        });\n    }\n\n    return (\n        <>\n            <table>\n                <thead>\n                    <tr>\n                        {/* {renderHeader()} */}\n                    </tr>\n                </thead>\n                <tbody>\n                    {renderTableBody()}\n                </tbody>\n            </table>\n            <div>\n                Rows: {tableData.length}, Columns: {col}\n            </div>\n            <div>\n                Headers: { useHeader ? 'on' : 'off'}\n            </div>\n            <div>\n\n            </div>\n            <HorizontalDiv>\n                <Button buttonType=\"primary\" onClick={addRow}>Add Row</Button>\n                <Button buttonType=\"primary\" onClick={removeRow}>Remove Row</Button>\n            </HorizontalDiv>\n            <HorizontalDiv>\n                <Button buttonType=\"primary\" onClick={addCol}>Add Column</Button>\n                <Button buttonType=\"primary\" onClick={removeCol}>Remove Column</Button>\n            </HorizontalDiv>\n            <HorizontalDiv>\n                <Button buttonType=\"primary\" onClick={handleToggleHeader}>Toggle Header</Button>\n            </HorizontalDiv>\n        </>\n    )\n}\n\nexport default TableExtension;\n\n// build the html for the rows, create the data on save? Data should be a variable as it's to re-render the page.","import './App.css';\nimport TableExtension from \"./components/Table/Table.component\";\nimport styled from 'styled-components';\n\nconst AppContainer = styled.div`\n  overflow: hidden;\n  border-radius: 10px;\n`;\n\n\nfunction App() {\n    return (\n      <AppContainer className=\"App\">\n        <header className=\"App-header\">\n          <TableExtension></TableExtension>\n        </header>\n      </AppContainer>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}